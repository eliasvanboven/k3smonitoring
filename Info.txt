ðŸ“„ ./01-loki/configmap.yaml
-------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: logging
data:
  local-config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      path_prefix: /tmp/loki
      storage:
        filesystem:
          chunks_directory: /tmp/loki/chunks
          rules_directory: /tmp/loki/rules

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    storage_config:
      boltdb:
        directory: /tmp/loki/boltdb

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    ruler:
      storage:
        type: local
        local:
          directory: /tmp/loki/rules

ðŸ“„ ./01-loki/service.yaml
-------------------------
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: logging
spec:
  ports:
  - port: 3100
    targetPort: 3100
  selector:
    app: loki

ðŸ“„ ./01-loki/deployment.yaml
-------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
      - name: init-storage
        image: alpine:3.18
        command:
        - "sh"
        - "-c"
        - |
          mkdir -p /tmp/loki/boltdb
          mkdir -p /tmp/loki/chunks
          mkdir -p /tmp/loki/rules
          chmod -R 777 /tmp/loki
        volumeMounts:
        - name: storage
          mountPath: /tmp/loki
        securityContext:
          runAsUser: 0

      containers:
      - name: loki
        image: grafana/loki:2.8.4
        args: ["-config.file=/etc/loki/local-config.yaml"]
        ports:
        - containerPort: 3100
        volumeMounts:
        - name: config
          mountPath: /etc/loki
        - name: storage
          mountPath: /tmp/loki
      volumes:
      - name: config
        configMap:
          name: loki-config
      - name: storage
        emptyDir: {}

ðŸ“„ ./02-promtail/configmap.yaml
-------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: logging
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push
        batchwait: 1s
        batchsize: 102400

    scrape_configs:
    - job_name: static-logs
      static_configs:
      - targets: [localhost]
        labels:
          job: log-generator
          __path__: /var/log/pods/logging_log-generator-6b45577664-bb2tw_3d6c3291-6eda-440a-9861-300d42998e39/generator/0.log

ðŸ“„ ./02-promtail/serviceaccount.yaml
-------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
- kind: ServiceAccount
  name: promtail
  namespace: logging

ðŸ“„ ./02-promtail/daemonset.yaml
-------------------------
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: logging
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: promtail
      containers:
      - name: promtail
        image: grafana/promtail:2.8.4
        args:
        - -config.file=/etc/promtail/promtail.yaml
        - -log.level=debug
        - -print-config-stderr
        - -client.external-labels=host=${HOSTNAME}
        securityContext:
          runAsUser: 0
          readOnlyRootFilesystem: false
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /etc/promtail
        - name: pods
          mountPath: /var/log/pods
          readOnly: false
        - name: containers
          mountPath: /var/lib/containerd
          readOnly: true
        ports:
        - containerPort: 9080
          name: http-metrics
      volumes:
      - name: config
        configMap:
          name: promtail-config
      - name: pods
        hostPath:
          path: /var/log/pods
          type: Directory
      - name: containers
        hostPath:
          path: /var/lib/containerd
          type: Directory

ðŸ“„ ./00-namespace.yaml
-------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: logging

ðŸ“„ ./treecat.sh
-------------------------
#!/bin/bash
for file in $(find . -type f); do
  echo "ðŸ“„ $file"
  echo "-------------------------"
  cat "$file"
  printf "\n\n"
done


ðŸ“„ ./logging-debug.sh
-------------------------
#!/bin/bash
set -euo pipefail

echo "=== KUBERNETES LOGGING DEBUGGER ==="
echo "Datum: $(date)"

# 1. Cluster status
echo "### 1. CLUSTER STATUS ###"
kubectl get nodes -o wide || echo "Fout bij ophalen van cluster nodes"
echo ""

# 2. Logging namespace
echo "### 2. LOGGING NAMESPACE ###"
kubectl get all -n logging || echo "Fout: namespace 'logging' niet gevonden"
echo ""

# 3. Pod details
echo "### 3. POD DETAILS ###"
pods=$(kubectl get pods -n logging -o name || true)
for pod in $pods; do
  echo "---- ${pod} ----"
  kubectl get -n logging "$pod" -o wide || echo "Pod ophalen mislukt"
  kubectl describe -n logging "$pod" | grep -A 10 "Status:" || echo "Status niet gevonden"
  echo ""
done

# 4. Log generator check
echo "### 4. LOG GENERATOR OUTPUT ###"
gen_pod=$(kubectl get pod -n logging -l app=log-generator -o name | head -1 || true)
if [ -n "$gen_pod" ]; then
  kubectl exec -n logging "$gen_pod" -- sh -c 'tail -n 5 /var/log/app/app.log 2>/dev/null || echo "GEEN LOGS GEVONDEN"'
else
  echo "Log-generator pod niet gevonden"
fi
echo ""

# 5. Promtail status
echo "### 5. PROMTAIL STATUS ###"
prom_pod=$(kubectl get pod -n logging -l app=promtail -o name | head -1 || true)
if [ -n "$prom_pod" ]; then
  echo "--- Logbestanden in /var/log/pods/ ---"
  kubectl exec -n logging "$prom_pod" -- sh -c 'ls -la /var/log/pods/*/*/*.log 2>/dev/null || echo "GEEN LOGBESTANDEN"'

  echo "--- Promtail Targets ---"
  kubectl exec -n logging "$prom_pod" -- sh -c 'wget -qO- http://localhost:9080/targets 2>/dev/null || echo "TARGETS CHECK MISLUKT"'

  echo "--- Promtail Logs ---"
  kubectl logs -n logging "$prom_pod" --tail=10 || echo "Logs ophalen mislukt"
else
  echo "Promtail pod niet gevonden"
fi
echo ""

# 6. Loki status
echo "### 6. LOKI STATUS ###"
loki_pod=$(kubectl get pod -n logging -l app=loki -o name | head -1 || true)
if [ -n "$loki_pod" ]; then
  echo "--- Storage ---"
  kubectl exec -n logging "$loki_pod" -- sh -c 'ls -la /tmp/loki/ 2>/dev/null || echo "GEEN STORAGE"'

  echo "--- Ontvangen Logs ---"
  kubectl exec -n logging "$loki_pod" -- sh -c 'wget -qO- "http://localhost:3100/loki/api/v1/query?query={namespace=\"logging\"}&limit=5" 2>/dev/null || echo "QUERY MISLUKT"'
else
  echo "Loki pod niet gevonden"
fi
echo ""

echo "=== DEBUG VOLTOOID ==="


ðŸ“„ ./03-log-generator/deployment.yaml
-------------------------
# 03-log-generator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-generator
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-generator
  template:
    metadata:
      labels:
        app: log-generator
    spec:
      containers:
      - name: generator
        image: alpine:3.18
        command: ["sh", "-c"]
        args:
        - |
          # Installeer benodigdheden
          apk add --no-cache curl postgresql-client

          # Oneindige loop met verschillende log types
          while true; do
            # PHP-style logs
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: Undefined variable in /app/index.php line 42" | tee /proc/1/fd/1
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: Database connection failed" | tee /proc/1/fd/1

            # Database-style logs
            echo "LOG:  duration: 15.2ms  statement: SELECT * FROM users WHERE id = 123" | tee /proc/1/fd/1
            echo "ERROR:  duplicate key value violates unique constraint" | tee /proc/1/fd/1

            # Multi-line exception
            echo -e "EXCEPTION: RuntimeException: File not found\nStack trace:\n#0 /app/lib/File.php(42): File->open()\n#1 /app/index.php(15): include()" | tee /proc/1/fd/1

            # HTTP request log
            echo '127.0.0.1 - - [$(date +"%d/%b/%Y:%H:%M:%S %z")] "GET /api/users HTTP/1.1" 200 342' | tee /proc/1/fd/1

            sleep 10
          done

ðŸ“„ ./04-grafana/04-grafana.yaml
-------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: logging
data:
  loki.yaml: |-
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      url: http://loki:3100
      access: proxy

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: datasources
        configMap:
          name: grafana-datasources

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: logging
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30080
  selector:
    app: grafana